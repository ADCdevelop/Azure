{
	"name": "ps_CovidTrackingCountry",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSV_CovidTrackingSubregion",
						"type": "DatasetReference"
					},
					"name": "RawData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIR_psresults",
						"type": "DatasetReference"
					},
					"name": "DestinationPSCovTotalCountry"
				}
			],
			"transformations": [
				{
					"name": "aggregatetoCountryLevel",
					"description": "aggregate so that we have data per contry each day"
				},
				{
					"name": "SelectAliasColumns",
					"description": "Select only important values"
				},
				{
					"name": "MakeNullsZero",
					"description": "All Null values become now 0"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          Updated as string,",
				"          Confirmed as integer,",
				"          ConfirmedChange as integer,",
				"          Deaths as integer,",
				"          DeathsChange as integer,",
				"          Recovered as integer,",
				"          RecoveredChange as integer,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          AdminRegion1 as string,",
				"          AdminRegion2 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawData",
				"RawData aggregate(groupBy(Country_Region,",
				"          Updated),",
				"     ConfirmedChange = sum(ConfirmedChange),",
				"          DeathsChange = sum(DeathsChange),",
				"          RecoveredChange = sum(RecoveredChange)) ~> aggregatetoCountryLevel",
				"MakeNullsZero select(mapColumn(",
				"          Country_Region,",
				"          DayDate = Updated,",
				"          TotalConfirmedCases = ConfirmedChange,",
				"          TotalDeaths = DeathsChange,",
				"          TotalRecovered = RecoveredChange",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAliasColumns",
				"aggregatetoCountryLevel derive(Country_Region = iifNull(Country_Region,'0'),",
				"          ConfirmedChange = iifNull(ConfirmedChange,0),",
				"          DeathsChange = iifNull(DeathsChange,0),",
				"          RecoveredChange = iifNull(RecoveredChange,0)) ~> MakeNullsZero",
				"SelectAliasColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ps_cov_cntry'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DestinationPSCovTotalCountry"
			]
		}
	}
}