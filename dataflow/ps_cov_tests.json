{
	"name": "ps_cov_tests",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Covid_tests_per_subregion",
						"type": "DatasetReference"
					},
					"name": "RawDataTest"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "psres",
						"type": "DatasetReference"
					},
					"name": "DestinationPSCovTest"
				}
			],
			"transformations": [
				{
					"name": "aggregatetoCountryLevel",
					"description": "aggregate so that we have data per contry each day"
				},
				{
					"name": "Select",
					"description": "Select only important values"
				},
				{
					"name": "MakeNullsZero",
					"description": "All Null values become now 0"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as string,",
				"          Updated as string,",
				"          Confirmed as integer,",
				"          ConfirmedChange as integer,",
				"          Deaths as integer,",
				"          DeathsChange as integer,",
				"          Recovered as integer,",
				"          RecoveredChange as integer,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          AdminRegion1 as string,",
				"          AdminRegion2 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> RawDataTest",
				"RawDataTest aggregate(groupBy(Updated,",
				"          AdminRegion1,",
				"          AdminRegion2,",
				"          Country_Region),",
				"     Confirmed = sum(Confirmed),",
				"          ConfirmedChange = sum(ConfirmedChange),",
				"          Deaths = sum(Deaths),",
				"          DeathsChange = sum(DeathsChange),",
				"          Recovered = sum(Recovered),",
				"          RecoveredChange = sum(RecoveredChange)) ~> aggregatetoCountryLevel",
				"MakeNullsZero select(mapColumn(",
				"          Country_Region,",
				"          Updated,",
				"          Confirmed,",
				"          ConfirmedChange,",
				"          Deaths,",
				"          DeathsChange,",
				"          Recovered,",
				"          RecoveredChange",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"aggregatetoCountryLevel derive(Updated = iifNull(Updated,'0'),",
				"          Country_Region = iifNull(Country_Region,'0'),",
				"          Confirmed = iifNull(Confirmed,0),",
				"          ConfirmedChange = iifNull(ConfirmedChange,0),",
				"          Deaths = iifNull(Deaths,0),",
				"          DeathsChange = iifNull(DeathsChange,0),",
				"          Recovered = iifNull(Recovered,0),",
				"          RecoveredChange = iifNull(RecoveredChange,0)) ~> MakeNullsZero",
				"Select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ps_cov_tests'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DestinationPSCovTest"
			]
		}
	}
}